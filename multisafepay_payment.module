<?php

/**
 * @file multisafepay_payment.module
 */

/**
 * Implements hook_libraries_info().
 */
function multisafepay_payment_libraries_info() {

  $libraries['multisafepay_php'] = array(
    'name' => 'MultiSafePay Library PHP',
    'vendor url' => 'https://github.com/MultiSafepay/PHP',
    'download url' => 'https://github.com/MultiSafepay/PHP/archive/master.zip',
    'version callback' => '_multisafepay_payment_simple_version_callback',
    'files' => array(
      // For PHP libraries
      'php' => array(
        'models/API/Client.php',
        'models/API/Object/Core.php',
        'models/API/Object/Gateways.php',
        'models/API/Object/Issuers.php',
        'models/API/Object/Orders.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Return TRUE value.
 *
 * @return bool
 *  TRUE
 */
function _multisafepay_payment_simple_version_callback() {
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function multisafepay_payment_menu() {

  $items['multisafepay/callback'] = array(
    'page callback' => 'multisafepay_payment_callback',
    'access callback' => 'multisafepay_payment_callback_access',
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_payment_method_controller_info().
 */
function multisafepay_payment_payment_method_controller_info() {
  return array('MultiSafePayPaymentMethodController');
}

/**
 * Retrieves the definitions of all MultiSafepay order plugins, or a specific one.
 *
 * @param string|null $plugin_msp_order
 *   (optional) The ID of the plugin whose definition should be
 *   retrieved. Or NULL to return all known definitions.
 *
 * @return array|null
 *   If $plugin_msp_order was given, either the definition of the given
 *   plugin, or NULL if it isn't known. Otherwise, an associative array of all
 *   known plugin definitions, keyed by ID.
 */
function multisafepay_payment_plugin_msp_order_info($plugin_msp_order = NULL) {
  $plugins_msp_order = &drupal_static(__FUNCTION__);

  if (!isset($plugins_msp_order)) {
    $plugins_msp_order = module_invoke_all('multisafepay_payment_plugin_msp_order_info');
    drupal_alter('multisafepay_payment_plugin_msp_order_info', $plugins_msp_order);
    foreach ($plugins_msp_order as $i => $definition) {
      if (empty($definition['class']) ||
        !class_exists($definition['class']) ||
        !in_array('MultiSafePayPaymentCreatorOrderInterface', class_implements($definition['class']))
      ) {
        $variables['@plugin_msp_order'] = $i;
        watchdog('multisafepay_payment', 'MultiSafepay creator plugin with ID @plugin_msp_order does not specify a valid plugin class.', $variables, WATCHDOG_ERROR);
        unset($plugins_msp_order[$i]);
      }
    }
  }

  if (!isset($plugin_msp_order)) {
    return $plugins_msp_order;
  }
  return isset($plugins_msp_order[$plugin_msp_order]) ? $plugins_msp_order[$plugin_msp_order] : NULL;
}

/**
 * Implements multisafepay_payment_plugin_msp_order_info().
 */
function multisafepay_payment_multisafepay_payment_plugin_msp_order_info() {
  $plugings_msp_order['redirect'] = array(
    'label' => t('Redirect'),
    'description' => t('For normal orders.'),
    'class' => 'MultiSafePayPaymentCreatorOrderRedirect',
  );

  return $plugings_msp_order;
}

/**
 * Implements hook_entity_load().
 */
function multisafepay_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    $pmids = array();
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'MultiSafePayPaymentMethodController') {
        $pmids[] = $payment_method->pmid;
      }
    }
    if ($pmids) {
      $query = db_select('multisafepay_payment_payment')
        ->fields('multisafepay_payment_payment')
        ->condition('msp_id', $pmids);
      $result = $query->execute();
      while ($data = $result->fetchAssoc()) {
        $payment_method = $entities[$data['msp_id']];
        $payment_method->controller_data = (array) $data;
        unset($payment_method->controller_data['msp_id']);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function multisafepay_payment_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'MultiSafePayPaymentMethodController') {
    $values = $payment_method->controller_data += $payment_method->controller->controller_data_defaults;
    $values['msp_id'] = $payment_method->pmid;
    drupal_write_record('multisafepay_payment_payment', $values);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function multisafepay_payment_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'MultiSafePayPaymentMethodController') {
    $values = $payment_method->controller_data += $payment_method->controller->controller_data_defaults;
    $values['msp_id'] = $payment_method->pmid;
    drupal_write_record('multisafepay_payment_payment', $values, 'msp_id');
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function multisafepay_payment_payment_method_delete($entity) {
  if ($entity->controller->name == 'MultiSafePayPaymentMethodController') {
    db_delete('multisafepay_payment_payment')
      ->condition('msp_id', $entity->pmid)
      ->execute();
  }
}

/**
 * Form build callback: implements
 * PaymentMethodController::payment_method_configuration_form_elements_callback.
 */
function multisafepay_payment_payment_method_configuration_form_elements(array $form, array &$form_state) {

  $payment_method = $form_state['payment_method'];
  $controller = $payment_method->controller;
  $controller_data = $payment_method->controller_data + $controller->controller_data_defaults;

  // api_key
  $elements['api_key'] = array(
    '#default_value' => $controller_data['api_key'],
    '#required' => TRUE,
    '#title' => t('Api Key'),
    '#description' => t('Api Key Site.'),
    '#type' => 'textfield',
  );
  // api_server
  $elements['api_server'] = array(
    '#default_value' => $controller_data['api_server'],
    '#options' => array(
      $controller::SERVER_SANDBOX => t('Sandbox - use for testing'),
      $controller::SERVER_PRODUCTION => t('Production - use for processing real transactions'),
    ),
    '#required' => TRUE,
    '#title' => t('Server call'),
    '#description' => t(''),
    '#type' => 'radios',
  );

  // Get all Plugins.
  $plugins = multisafepay_payment_plugin_msp_order_info();

  // Retrive default plugin used.
  $plugin_default = isset($controller_data['plugin']) ? $controller_data['plugin'] : key($plugins);

  $elements['plugin'] = array(
    '#type' => 'radios',
    '#title' => t('Plugin'),
    '#description' => t('Choose the plugin implementation to use.'),
    '#options' => array(),
    '#required' => TRUE,
    '#default_value' => $plugin_default,
    '#ajax' => array(
      'callback' => 'multisafepay_payment_plugin_ajax_callback',
      'wrapper' => 'multisafepay-payment-plugin-configuration',
    ),
  );

  foreach ($plugins as $plugin_id => $plugin_data) {

    $configuration = unserialize($controller_data['configuration']);
    $configuration = is_array($configuration) ? $configuration : array();
    $plugin = new $plugin_data['class']($plugin_id, $plugin_data, $configuration);

    // Add the creator to the creator options.
    $elements['plugin']['#options'][$plugin_id] = $plugin->label();

    // Then, also add the configuration form for the selected suggester.
    if ($plugin_id != $plugin_default) {
      continue;
    }

    $plugin_form_state = &multisafepay_payment_get_plugin_form_state($form_state);
    $plugin_form = $plugin->buildConfigurationForm(array(), $plugin_form_state);
    if ($plugin_form) {
      $elements['configuration']['plugin_configuration'] = $plugin_form;
      $elements['configuration']['plugin_configuration']['#type'] = 'fieldset';
      $elements['configuration']['plugin_configuration']['#title'] = t('Configure the %plugin plugin', array('%plugin' => $plugin->label()));
      $elements['configuration']['plugin_configuration']['#description'] = $plugin->getDescription();
      $elements['configuration']['plugin_configuration']['#collapsible'] = TRUE;
    }
    else {
      $elements['configuration']['plugin_configuration']['#type'] = 'item';
    }
    $elements['configuration']['plugin_configuration']['#prefix'] = '<div id="multisafepay-payment-plugin-configuration">';
    $elements['configuration']['plugin_configuration']['#suffix'] = '</div>';
  }
  $elements['configuration']['plugin_configuration']['old_plugin_id'] = array(
    '#type' => 'hidden',
    '#value' => $controller_data['plugin'],
    '#tree' => FALSE,
  );

  return $elements;
}

/**
 * Implements form validate callback for
 * multisafepay_payment_payment_method_configuration_form_elements().
 */
function multisafepay_payment_payment_method_configuration_form_elements_validate(array $element, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  $controller_data = &$form_state['payment_method']->controller_data;
  $controller_data['api_key'] = $values['api_key'];
  $controller_data['api_server'] = $values['api_server'];
  $controller_data['plugin'] = $values['plugin'];
  $controller_data['plugin'] = $values['plugin'];
  $controller_data['configuration'] = $values['configuration']['plugin_configuration'];

  // TODO: implements validateConfigurationForm() of plugin selected.
}

/**
 * Implements form submit callback for
 * multisafepay_payment_payment_method_configuration_form_elements().
 */
function multisafepay_payment_payment_method_configuration_form_elements_submit(array $element, array &$form_state) {
  // TODO: implements submitConfigurationForm() of plugin selected.
}

/**
 * Form AJAX handler for multisafepay_payment_payment_method_configuration_form_elements().
 */
function multisafepay_payment_plugin_ajax_callback(array $form, array &$form_state) {
  return $form['controller_form']['configuration']['plugin_configuration'];
}

/**
 * Returns a new form state for the suggester configuration sub-form.
 *
 * @param array $form_state
 *   The original form state.
 *
 * @return array
 *   A form state for the sub-form.
 */
function &multisafepay_payment_get_plugin_form_state(array &$form_state) {
  $sub_form_state = &$form_state['suggester_form_state'];

  foreach (array('values', 'input') as $key) {
    if (!isset($form_state[$key]['options']['suggester_configuration'])) {
      $form_state[$key]['options']['suggester_configuration'] = array();
    }
    $sub_form_state[$key] = &$form_state[$key]['options']['suggester_configuration'];
  }

  foreach (array('rebuild', 'rebuild_info', 'redirect') as $key) {
    $sub_form_state[$key] = &$form_state[$key];
  }

  return $sub_form_state;
}

/**
 * Defines the payment callback.
 * POST callback that MultiSafepay uses to update the transaction.
 *
 */
function multisafepay_payment_callback($status = NULL) {

  if (!isset($_GET['transactionid']) && isset($_GET['payment_pid'])) {
    drupal_access_denied();
  }

  // Load variables.
  $transaction_id = $_GET['transactionid'];
  $payment_pid = $_GET['payment_pid'];
  $payment = entity_load_single('payment', $payment_pid);

  if (!isset($payment)) {
    drupal_access_denied();
  }

  // Load plugin creator MSP.
  $plugin_id = $payment->method->controller_data['plugin'];
  $definition = multisafepay_payment_plugin_msp_order_info($plugin_id);
  if (!$definition) {
    drupal_access_denied();
  }

  try {
    // TODO: reformat and correct
//    $plugin = call_user_func(array(
//      $definition['class'],
//      'create'
//    ), $payment, $payment->method, $configuration = array(), $plugin_id, $definition);
//    $class = $payment->method->controller_data['plugin'];
//    $plugin = new $class($plugin_id, $plugin_data, $controller_data['options']);
//    $plugin->receiveFeedback($transaction_id, $payment, $status);
  } catch (Exception $e) {
    watchdog('multisafepay_payment', t('Error: @error'), array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return NULL;
  }
}

/**
 * Checks access for the return URL.
 *
 * @return bool
 */
function multisafepay_payment_callback_access() {
  if (!isset($_GET['transactionid']) && isset($_GET['payment_pid'])) {
    return FALSE;
  }
  $transaction_id = $_GET['transactionid'];
  $payment_pid = $_GET['payment_pid'];
  $payment = entity_load_single('payment', $payment_pid);
  if (!isset($payment)) {
    return FALSE;
  }

  // TODO: check user has permission to access transaction.
  return TRUE;
}

/**
 * Retrieve MultiSafepay Order from server MultiSafepay.
 *
 * @param $transaction_id
 *    Transaction ID.
 * @param \PaymentMethod $payment_method
 *    PaymentMethod used.
 * @return Object|null
 *    Return, if found, a object contains MSP Order.
 */
function multisafepay_payment_get_order_from_multisafepay($transaction_id, PaymentMethod $payment_method) {

  // Load the library 'multisafepay_php' and check.
  if (($library = libraries_load('multisafepay_php')) && !empty($library['loaded'])) {

    // Use MultiSafePay Libraries.
    $msp = new Client();
    $msp->setApiKey($payment_method->controller_data['api_key']);
    $msp->setApiUrl($payment_method->controller->serverURL($payment_method->controller_data['api_server']));

    try {
      $msp_order = $msp->orders->get($endpoint = 'orders', $transaction_id, $body = array(), $query_string = FALSE);
      return $msp_order;

    } catch (Exception $e) {
      drupal_set_message("Error in communication with MultiSafepay Server. Contact Support.", 'error');
      watchdog('multisafepay_payment', t("Error: @error"), array('@error' => $e->getMessage()), WATCHDOG_ERROR);
      return NULL;
    }
  }
  return NULL;
}

/**
 * @param null $msp_logo
 * @return array|null|string
 */
function multisafepay_payment_logo($msp_logo = NULL) {
  // TODO: include .gif
  $files_logo = file_scan_directory(drupal_get_path('module', 'multisafepay_payment') . '/images', '/\.png/');

  foreach ($files_logo as $file) {
    $msp_maps_logos[$file->name] = array(
      'name' => $file->name,
      'filename' => $file->name,
      'uri' => $file->uri,
    );
  }

  if (isset($msp_logo)) {
    $msp_logo = strtolower($msp_logo);
    return isset($msp_maps_logos[$msp_logo]) ? $msp_maps_logos[$msp_logo] : NULL;
  }
  return $msp_maps_logos;
}
